#!/usr/bin/make -f

################################################################################
# Makefile for building of HAL Libraries for STM3F0 Discovery
# Uses only minimal possible count of libraries generated by STMCubeMX
# Andrej Bendzo  <andrej.sl@azet.sk>
# 2016 08 09
#
# Modified for development board STM32L476xx
# Alejandro Colomar  <1903716@gmail.com>
# Javi
# 2018
################################################################################


################################################################################
# Beautify output
# ---------------------------------------------------------------------------
# Prefix commands with $(Q) - that's useful
# for commands that shall be hidden in non-verbose mode.
#
#	$(Q)some command here
#
# If BUILD_VERBOSE equals 0 then the above command will be hidden.
# If BUILD_VERBOSE equals 1 then the above command is displayed.
#
# To put more focus on warnings, be less verbose as default
# Use 'make V=1' to see the full commands

ifeq ("$(origin V)","command line")
  BUILD_VERBOSE = $(V)
endif
ifndef BUILD_VERBOSE
  BUILD_VERBOSE = 0
endif

ifeq ($(BUILD_VERBOSE), 1)
  Q =
else
  Q = @
endif

# If the user is running make -s (silent mode), suppress echoing of
# commands

ifneq ($(findstring s,$(filter-out --%,$(MAKEFLAGS))),)
  Q = @
endif

export	Q
export	BUILD_VERBOSE


################################################################################
# Make variables (CC, etc...)
CC	= arm-none-eabi-gcc
AR	= arm-none-eabi-ar

export	CC
export	AR


vpath %.c STM32L4xx_HAL_Driver/Src


################################################################################
# CFLAGS
CFLAGS_STD	= -std=c11
CFLAGS_STD     += -ffreestanding
CFLAGS_STD     += -nostdlib

CFLAGS_OPT	= -Os

CFLAGS_MCU	= -mlittle-endian
CFLAGS_MCU     += -march=armv7e-m
CFLAGS_MCU     += -mcpu=cortex-m4
CFLAGS_MCU     += -mthumb
CFLAGS_MCU     += -mfpu=fpv4-sp-d16
CFLAGS_MCU     += -mfloat-abi=hard

CFLAGS_W	= -Wall
CFLAGS_W       += -Wextra
CFLAGS_W       += -Wstrict-prototypes
CFLAGS_W       += -Werror

CFLAGS_F	= -ffreestanding
CFLAGS_F       += -flto
CFLAGS_F       += -fsingle-precision-constant
CFLAGS_F       += -ffunction-sections
CFLAGS_F       += -fdata-sections

C_INCLUDES	= -I CMSIS/Include
C_INCLUDES     += -I CMSIS/ST/STM32L4xx/Include
C_INCLUDES     += -I STM32L4xx_HAL_Driver/Inc
C_INCLUDES     += -I STM32L4xx_HAL_Driver/Inc/Legacy

CFLAGS		= $(CFLAGS_STD)
CFLAGS	       += $(CFLAGS_OPT)
CFLAGS	       += $(CFLAGS_MCU)
CFLAGS	       += $(CFLAGS_W)
CFLAGS	       += $(CFLAGS_F)
CFLAGS	       += $(C_INCLUDES)


################################################################################
LIBAR = libstm32l4.a


# ***  List of files, that should be compiled ***
# You can obtain it as a list of files in dir ./STM32L4xx_HAL_Driver/Src
# That directory don't contain all possible HAL drivers, only those used by STMCube (depends on peripherals used in STMCube project).
# It's easy to add another driver files, only add them into directories ./STM32L4xx_HAL_Driver/Src and ./STM32F0xx_HAL_Driver/Inc and to this list.

SRCS  = stm32l4xx_hal.c \
	stm32l4xx_hal_can.c \
	stm32l4xx_hal_cortex.c \
	stm32l4xx_hal_dma.c \
	stm32l4xx_hal_flash.c \
	stm32l4xx_hal_flash_ex.c \
	stm32l4xx_hal_gpio.c \
	stm32l4xx_hal_i2c.c \
	stm32l4xx_hal_i2c_ex.c \
	stm32l4xx_hal_pwr.c \
	stm32l4xx_hal_pwr_ex.c \
	stm32l4xx_hal_rcc.c \
	stm32l4xx_hal_rcc_ex.c \
	stm32l4xx_hal_spi.c \
	stm32l4xx_hal_spi_ex.c \
	stm32l4xx_hal_tim.c \
	stm32l4xx_hal_tim_ex.c

OBJS = $(addprefix tmp/,$(SRCS:.c=.o))
#DEPS = $(addprefix deps/f0/,$(SRCS:.c=.d))
DEPS = $(addprefix deps/l4/,$(SRCS:.c=.d))

.PHONY: all clean


# First create directories, then compile files
all: dirs lib/$(LIBAR)

-include $(DEPS)

dirs:
	@echo	"	MKDIR	deps tmp lib"
	$(Q)mkdir -p deps tmp lib


# Compilation of individual files
tmp/%.o : %.c
	@echo	"	CC	$@"
	$(Q)$(CC) $(CFLAGS) -c -o $@ $< -MMD -MF deps/$(*F).d


# Will create archive with libraries
lib/$(LIBAR): $(OBJS)
	@echo  "	AR	$@"
	$(Q)$(AR) -r -c -s -o $@ $(OBJS)
	@echo  ""

clean:
	@echo	"	CLEAN	stm32-drivers"
	$(Q)rm -f $(OBJS) $(DEPS) lib/$(LIBAR)

